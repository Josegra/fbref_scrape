# -*- coding: utf-8 -*-
"""Big5 Union

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GBPJCt_S7OUnDnPoapftNeD0MhkOI9Wk

### **Importar csv**
"""

import pandas as pd

base_url = "https://raw.githubusercontent.com/Josegra/fbref_scrape/refs/heads/main/data/"

defensive = pd.read_csv(base_url + "defensive_big5.csv")
gca = pd.read_csv(base_url + "gca_big5.csv")
misc = pd.read_csv(base_url + "misc_big5.csv")
passing = pd.read_csv(base_url + "passing_big5.csv")  # Nota: este archivo no está en la lista, si existe, puedes cargarlo
passing_types = pd.read_csv(base_url + "passing_types_big5.csv")
playing_time = pd.read_csv(base_url + "playing_time_big5.csv")
possession = pd.read_csv(base_url + "possession_big5.csv")
salaries = pd.read_csv(base_url + "salaries_big5.csv")
shooting = pd.read_csv(base_url + "shooting_big5.csv")
standard = pd.read_csv(base_url + "standard_big5.csv")
df_maestro = pd.read_csv("https://raw.githubusercontent.com/Josegra/Football_Scraper/main/players.csv")

"""### **Renombrar columnas**"""

# Renombrar columnas para evitar conflictos y mantener claridad semántica
misc.rename(columns={
    "CrdY": "CrdY_misc",
    "CrdR": "CrdR_misc"
}, inplace=True)

shooting.rename(columns={
    "PK": "PK_shooting",              # Penales convertidos (goles)
    "PKatt": "PKatt_shooting",        # Penales intentados
    "FK": "FK_shots"                  # Tiros desde tiros libres
}, inplace=True)

passing_types.rename(columns={
    "FK": "FK_passes"                 # Pases desde tiros libres
}, inplace=True)

possession.rename(columns={
    "Live": "Live_possession",
    "Att": "Att_possession",
    "1/3": "1/3_possession"
}, inplace=True)
possession.drop(columns=["PrgC", "PrgR"], inplace=True)
misc.rename(columns={
    "Off": "Offsides"}, inplace=True)
misc.drop(columns=["Crs", "Int"], inplace=True)

"""### **Columnas duplicadas**"""

# Columnas a eliminar en los demás datasets porque ya están en `standard`
columns_to_drop = ['MP', 'Min', 'Starts', 'Gls', 'xG', 'npxG','League','Squad','Player','Nation','Pos','Age','90s','Comp','Born','Rk']  # 'PlSqu' si está duplicado y sin valor añadido

# Aplica en todos los DataFrames excepto 'standard'
defensive.drop(columns=[col for col in columns_to_drop if col in defensive.columns], inplace=True)
gca.drop(columns=[col for col in columns_to_drop if col in gca.columns], inplace=True)
misc.drop(columns=[col for col in columns_to_drop if col in misc.columns], inplace=True)
passing.drop(columns=[col for col in columns_to_drop if col in passing.columns], inplace=True)
passing_types.drop(columns=[col for col in columns_to_drop if col in passing_types.columns], inplace=True)
playing_time.drop(columns=[col for col in columns_to_drop if col in playing_time.columns], inplace=True)
possession.drop(columns=[col for col in columns_to_drop if col in possession.columns], inplace=True)
shooting.drop(columns=[col for col in columns_to_drop if col in shooting.columns], inplace=True)

"""### **Merge Standard-Shooting**"""

shooting_cleaned = shooting.drop(
    columns=[col for col in ['MP', 'Starts', 'Min', 'Gls', 'PK', 'PKatt', 'xG', 'npxG','Rk','Comp','Born'] if col in shooting.columns]
)
standard_shooting_merged = pd.merge(
    standard,
    shooting_cleaned,
    on='PlSqu',
    how='left'
)

"""**no hay columnas duplicadas ninguno tiene el sufijo de _x ni _y**

### **Merge con Passing**
"""

standard_shooting_passing_merged = pd.merge(
    standard_shooting_merged,
    passing.drop(columns=[col for col in ['Ast', 'xAG', 'PrgP'] if col in standard_shooting_merged.columns]),
    on='PlSqu',
    how='left'
)

"""**no hay columnas duplicadas ninguno tiene el sufijo de _x ni _y**

### **Merge con Passing Types**
"""

standard_shooting_passing_passingtypes_merged = pd.merge(
    standard_shooting_passing_merged,
    passing_types,
    on='PlSqu',
    how='left'
)

"""### **Merge con GCA**"""

standard_shooting_passing_passingtypes_shot_creation_merged = pd.merge(
    standard_shooting_passing_passingtypes_merged,
    gca,
    on='PlSqu',
    how='left'
)

"""### **Merge con Defensive actions**"""

standard_shooting_passing_passingtypes_shot_creation__defensive_merged = pd.merge(
    standard_shooting_passing_passingtypes_shot_creation_merged,
    defensive,
    on='PlSqu',
    how='left'
)

"""### **Merge con possession**"""

standard_shooting_passing_passingtypes_shot_creation__defensive__possession_merged = pd.merge(
    standard_shooting_passing_passingtypes_shot_creation__defensive_merged,
    possession,
    on='PlSqu',
    how='left'
)

"""### **Merge con Playing time**"""

standard_shooting_passing_passingtypes_shot_creation__defensive__possession_playingtime_merged = pd.merge(
    standard_shooting_passing_passingtypes_shot_creation__defensive__possession_merged,
    playing_time,
    on='PlSqu',
    how='left'
)

"""### **Merge con Misc**"""

standard_shooting_passing_passingtypes_shot_creation__defensive__possession_playingtime__misc_merged = pd.merge(
    standard_shooting_passing_passingtypes_shot_creation__defensive__possession_playingtime_merged,
    misc,
    on='PlSqu',
    how='left'
)

df_merged = standard_shooting_passing_passingtypes_shot_creation__defensive__possession_playingtime__misc_merged

df_merged= df_merged[df_merged['Pos']!='GK']

"""### Merge con Salaries

#### Join con el nombre solamente
"""

# Nombres correctos (FBref)
nombres_fbref = [
    "Illia Zabarnyi", "Javier Guerra", "Alvaro Garcia", "Nicolas Paz", "Sergi Cardona",
    "Valentin Atangana Edoa", "Yehor Yarmoliuk", "Alexsandro Ribeiro", "Victor Bernth Kristiansen",
    "Dailon Livramento", "Pierre Ekwah Elimby", "Manuel Ugarte Ribeiro", "Johnny Cardoso",
    "Manuel Fuster", "Jon Rowe", "Francisco Perez", "Antoniu", "Peque", "Jean Matteo Bahoya",
    "Orri Steinn Oskarsson", "Hong Hyunseok", "Alejandro Jimenez", "Ngal'Ayel Mukau",
    "Abdoulaye Niakhate Ndiaye", "Lucas Oliveira Rosa", "Juan Herzog", "Keke Maximilian Topp",
    "Jesus Santiago", "Bahereba Guirassy", "Peter Gonzalez", "Urko Gonzalez", "Guimissongui Ouattara",
    "Carlos Gomez", "Alvaro djalo", "Mohamed Haj", "James Mcatee", "Giorgos Masouras",
    "Giorgi Mamardashvili"
]

# Nombres con errores (Salarios)
nombres_salarios = [
    "Ilya Zabarnyi", "Javi Guerra", "Alvaro Garcia", "Nico Paz", "Sergi Cardona",
    "Valentin Atangana", "Yegor Yarmolyuk", "Alexsandro", "Victor Kristiansen",
    "Dailon Rocha Livramento", "Pierre Ekwah", "Manuel Ugarte", "Johnny",
    "Manu Fuster", "Jonathan Rowe", "Fran Perez", "Antoniu Roca", "Peque Fernandez",
    "Jean-Matteo Bahoya", "Orri Oskarsson", "Hyun-seok Hong", "Alex Jimenez", "Ngal'ayel Mukau",
    "Abdoulaye Ndiaye", "Lucas Rosa", "Juanma Herzog", "Keke Topp", "Yellu Santiago",
    "Herba Guirassy", "Peter Federico", "Urko Gonzalez de Zarate", "Abdoul Ouattara",
    "Carlos Andres Gomez", "Alvaro Djalo", "Anas Haj Mohamed", "James McAtee", "Georgios Masouras",
    "Giorgi Mamardashvili"
]

# Creamos diccionario de reemplazo
dicc_reemplazo_nombres = dict(zip(nombres_salarios, nombres_fbref))
# Reemplazar los nombres en la columna 'Jugador'
salaries['Player'] = salaries['Player'].replace(dicc_reemplazo_nombres)

df_total = pd.merge(
    df_merged,
    salaries[['Weekly Wages','Annual Wages','Notes','Player']],
    on='Player',
    how='left'
)
nulos = df_total[df_total['Weekly Wages'].isnull()]

df_total = df_total.drop_duplicates(subset='PlSqu')

df_total

"""### Merge con Transfermarkt data

#### Crear columna nueva
"""

import pandas as pd
from unidecode import unidecode
import os

# Crea la columna 'player_code' solo si existe 'Player'; si no, crea una columna vacía
df_total['player_code'] = (
    df_total['Player'].apply(
        lambda x: unidecode(str(x).lower().strip().replace("'", "").replace(" ", "-"))
        if pd.notnull(x) and str(x).strip() else None
    ) if 'Player' in df_total.columns else pd.Series(dtype='object')
)
# df_maestro['player_code'] = (
#     df_maestro['Player'].apply(
#         lambda x: unidecode(str(x).lower().strip().replace("'", "").replace(" ", "-"))
#         if pd.notnull(x) and str(x).strip() else None
#     ) if 'Player' in df_maestro.columns else pd.Series(dtype='object')
# )

columnas_maestro_seleccionadas = ['current_club_id', 'player_code', 'country_of_birth',
       'city_of_birth', 'country_of_citizenship', 'date_of_birth',
       'sub_position', 'position', 'foot', 'height_in_cm',
       'contract_expiration_date', 'agent_name', 'current_club_name',
       'market_value_in_eur', 'highest_market_value_in_eur']

df_maestro_filtrado = df_maestro[columnas_maestro_seleccionadas]

final_merged_df = pd.merge(df_total,
                        df_maestro_filtrado,
                        on='player_code',
                        how='left')
final_merged_df = final_merged_df.drop_duplicates(subset='PlSqu')

"""### Sustituir el nombre"""

nation_mapping = {
  'eng': 'England', 'es': 'Spain', 'ie': 'Ireland', 'fr': 'France', 'ma': 'Morocco',
  'dz': 'Algeria', 'eg': 'Egypt', 'tn': 'Tunisia', 'sa': 'Saudi Arabia', 'dk': 'Denmark',
  'br': 'Brazil', 'it': 'Italy', 'ng': 'Nigeria', 'sct': 'Scotland', 'us': 'USA',
  'at': 'Austria', 'de': 'Germany', 'ci': 'Ivory Coast', 'me': 'Montenegro', 'ch': 'Switzerland',
  'se': 'Sweden', 'gh': 'Ghana', 'no': 'Norway', 'ro': 'Romania', 'nl': 'Netherlands',
  'ar': 'Argentina', 'py': 'Paraguay', 'ga': 'Gabon', 'pt': 'Portugal', 'mx': 'Mexico',
  'sn': 'Senegal', 'pa': 'Panama', 'pr': 'Puerto Rico', 'jm': 'Jamaica', 'uy': 'Uruguay',
  've': 'Venezuela', 'ht': 'Haiti', 'is': 'Iceland', 'jp': 'Japan', 'al': 'Albania',
  'co': 'Colombia', 'tg': 'Togo', 'id': 'Indonesia', 'gn': 'Guinea', 'hr': 'Croatia',
  'sl': 'Sierra Leone', 'ca': 'Canada', 'cd': 'Congo (DR)', 'cm': 'Cameroon', 'hu': 'Hungary',
  'zm': 'Zambia', 'cz': 'Czech Republic', 'be': 'Belgium', 'tr': 'Turkey', 'sr': 'Suriname',
  'pl': 'Poland', 'sk': 'Slovakia', 'gw': 'Guinea-Bissau', 'si': 'Slovenia', 'ml': 'Mali',
  'nir': 'Northern Ireland', 'rs': 'Serbia', 'cl': 'Chile', 'wls': 'Wales', 'au': 'Australia',
  'nz': 'New Zealand', 'ec': 'Ecuador', 'lu': 'Luxembourg', 'gm': 'Gambia', 'cg': 'Congo',
  'bd': 'Bangladesh', 'gq': 'Equatorial Guinea', 'cv': 'Cape Verde', 'ge': 'Georgia',
  'mq': 'Martinique', 'ba': 'Bosnia and Herzegovina', 'mk': 'North Macedonia', 'bf': 'Burkina Faso',
  'gr': 'Greece', 'ua': 'Ukraine', 'cr': 'Costa Rica', 'lt': 'Lithuania', 'ru': 'Russia',
  'do': 'Dominican Republic', 'iq': 'Iraq', 'kr': 'South Korea', 'ph': 'Philippines',
  'bj': 'Benin', 'fi': 'Finland', 'ee': 'Estonia', 'zw': 'Zimbabwe', 'il': 'Israel',
  'cy': 'Cyprus', 'uz': 'Uzbekistan', 'ao': 'Angola', 'cf': 'Central African Republic',
  'gp': 'Guadeloupe', 'mg': 'Madagascar', 'pe': 'Peru', 'gf': 'French Guiana',
  'mz': 'Mozambique', 'am': 'Armenia', 'xk': 'Kosovo', 'ly': 'Libya', 'bi': 'Burundi',
  'ke': 'Kenya', 'km': 'Comoros', 'md': 'Moldova', 'ms': 'Montserrat', 'jo': 'Jordan',
  'ir': 'Iran', 'mt': 'Malta'
}
if 'Nation' in final_merged_df.columns:
  extracted_nation_code = final_merged_df['Nation'].astype(str).str.extract(r'^(\w+)')[0].str.lower()
  final_merged_df.loc[:, 'Nation'] = extracted_nation_code.map(nation_mapping).fillna(final_merged_df['Nation']) # Use .loc for assignment

"""### Extract the league column"""

final_merged_df.loc[:, 'Comp'] = final_merged_df['Comp'].astype(str).str.extract(r'^\w+\s+(.*)')[0].fillna(final_merged_df['Comp'])

"""### Export to csv"""

output_dir = './data'
output_filename = 'big5_merged.csv'
output_path = os.path.join(output_dir, output_filename)

# Crear el directorio si no existe
os.makedirs(output_dir, exist_ok=True)

# Eliminar el archivo si ya existe
if os.path.exists(output_path):
    os.remove(output_path)

# Guardar CSV
final_merged_df.to_csv(output_path, index=False)
print(f"\n¡Proceso completado! Archivo guardado en: {output_path}")
