# -*- coding: utf-8 -*-
"""other_leagues_merged

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rYM-kDtZhPGm3myoq8nCHQAVzPGbxI43
"""

import pandas as pd

# Base URL del repositorio
base_url = "https://raw.githubusercontent.com/Josegra/fbref_scrape/refs/heads/main/data/"

# Datos de ligas fuera del Top 5
defensive_actions = pd.read_csv(base_url + "defensive_actions_outside_top5.csv")
goal_and_shot = pd.read_csv(base_url + "goal_and_shot_outside_top5.csv")
miscellaneous = pd.read_csv(base_url + "miscellaneous_outside_top5.csv")
passing = pd.read_csv(base_url + "passing_outside_top5.csv")
passing_types = pd.read_csv(base_url + "passing_types_outside_top5.csv")
playing_time = pd.read_csv(base_url + "playing_time_outside_top5.csv")
possession = pd.read_csv(base_url + "possession_outside_top5.csv")
shooting = pd.read_csv(base_url + "shooting_outside_top5.csv")
standard = pd.read_csv(base_url + "standard_outside_top5.csv")
salaries = pd.read_csv(base_url + "salaries_big5.csv")

# Dataset maestro de jugadores
df_maestro_raw = pd.read_csv("https://raw.githubusercontent.com/Josegra/Football_Scraper/main/players.csv")

print(defensive_actions.shape)
print(standard.shape)

# Renombrar columnas para evitar conflictos y mantener claridad semántica
miscellaneous.rename(columns={
    "CrdY": "CrdY_misc",
    "CrdR": "CrdR_misc"
}, inplace=True)

shooting.rename(columns={
    "PK": "PK_shooting",              # Penales convertidos (goles)
    "PKatt": "PKatt_shooting",        # Penales intentados
    "FK": "FK_shots"                  # Tiros desde tiros libres
}, inplace=True)

passing_types.rename(columns={
    "FK": "FK_passes"                 # Pases desde tiros libres
}, inplace=True)
possession.rename(columns={
    "Live": "Live_possession",
    "Att": "Att_possession",
    "1/3": "1/3_possession"
}, inplace=True)
possession.drop(columns=["PrgC", "PrgR"], inplace=True)
miscellaneous.rename(columns={
    "Off": "Offsides"}, inplace=True)
miscellaneous.drop(columns=["Crs", "Int"], inplace=True)

# Columnas a eliminar en los demás datasets porque ya están en `standard`
columns_to_drop = ['MP', 'Min', 'Starts', 'Gls', 'xG', 'npxG','League','Squad','Player','Nation','Pos','Age','90s']  # 'PlSqu' si está duplicado y sin valor añadido

# Aplica en todos los DataFrames excepto 'standard'
defensive_actions.drop(columns=[col for col in columns_to_drop if col in defensive_actions.columns], inplace=True)
goal_and_shot.drop(columns=[col for col in columns_to_drop if col in goal_and_shot.columns], inplace=True)
miscellaneous.drop(columns=[col for col in columns_to_drop if col in miscellaneous.columns], inplace=True)
passing.drop(columns=[col for col in columns_to_drop if col in passing.columns], inplace=True)
passing_types.drop(columns=[col for col in columns_to_drop if col in passing_types.columns], inplace=True)
playing_time.drop(columns=[col for col in columns_to_drop if col in playing_time.columns], inplace=True)
possession.drop(columns=[col for col in columns_to_drop if col in possession.columns], inplace=True)
shooting.drop(columns=[col for col in columns_to_drop if col in shooting.columns], inplace=True)

"""### Standard Shooting Merge"""

shooting_cleaned = shooting.drop(
    columns=[col for col in ['MP', 'Starts', 'Min', 'Gls', 'PK', 'PKatt', 'xG', 'npxG'] if col in shooting.columns]
)
standard_shooting_merged = pd.merge(
    standard,
    shooting_cleaned,
    on='PlSqu',
    how='left'
)

"""### Passing Merge"""

standard_shooting_passing_merged = pd.merge(
    standard_shooting_merged,
    passing.drop(columns=[col for col in ['Ast', 'xAG', 'PrgP'] if col in standard_shooting_merged.columns]),
    on='PlSqu',
    how='left'
)

"""### Passing Types Merge"""

standard_shooting_passing_passingtypes_merged = pd.merge(
    standard_shooting_passing_merged,
    passing_types,
    on='PlSqu',
    how='left'
)

"""### GCA Merge"""

standard_shooting_passing_passingtypes_shot_creation_merged = pd.merge(
    standard_shooting_passing_passingtypes_merged,
    goal_and_shot,
    on='PlSqu',
    how='left'
)

"""### Defensive actions"""

standard_shooting_passing_passingtypes_shot_creation__defensive_merged = pd.merge(
    standard_shooting_passing_passingtypes_shot_creation_merged,
    defensive_actions,
    on='PlSqu',
    how='left'
)

"""### Possession Merge"""

standard_shooting_passing_passingtypes_shot_creation__defensive__possession_merged = pd.merge(
    standard_shooting_passing_passingtypes_shot_creation__defensive_merged,
    possession,
    on='PlSqu',
    how='left'
)

"""### Playing time Merge"""

standard_shooting_passing_passingtypes_shot_creation__defensive__possession_playingtime_merged = pd.merge(
    standard_shooting_passing_passingtypes_shot_creation__defensive__possession_merged,
    playing_time,
    on='PlSqu',
    how='left'
)

"""### Misc Merge"""

standard_shooting_passing_passingtypes_shot_creation__defensive__possession_playingtime__misc_merged = pd.merge(
    standard_shooting_passing_passingtypes_shot_creation__defensive__possession_playingtime_merged,
    miscellaneous,
    on='PlSqu',
    how='left'
)

df_merged = standard_shooting_passing_passingtypes_shot_creation__defensive__possession_playingtime__misc_merged

df_merged = df_merged[df_merged['Player'] != 'Opponent Total']

df_limpio = df_merged.drop_duplicates(subset=['Player', 'Pos', 'Squad'])

"""### Nation expandings text"""

# Tu diccionario de mapeo
nation_mapping = {
    'eng': 'England', 'es': 'Spain', 'ie': 'Ireland', 'fr': 'France', 'ma': 'Morocco',
    'dz': 'Algeria', 'eg': 'Egypt', 'tn': 'Tunisia', 'sa': 'Saudi Arabia', 'dk': 'Denmark',
    'br': 'Brazil', 'it': 'Italy', 'ng': 'Nigeria', 'sct': 'Scotland', 'us': 'USA',
    'at': 'Austria', 'de': 'Germany', 'ci': 'Ivory Coast', 'me': 'Montenegro', 'ch': 'Switzerland',
    'se': 'Sweden', 'gh': 'Ghana', 'no': 'Norway', 'ro': 'Romania', 'nl': 'Netherlands',
    'ar': 'Argentina', 'py': 'Paraguay', 'ga': 'Gabon', 'pt': 'Portugal', 'mx': 'Mexico',
    'sn': 'Senegal', 'pa': 'Panama', 'pr': 'Puerto Rico', 'jm': 'Jamaica', 'uy': 'Uruguay',
    've': 'Venezuela', 'ht': 'Haiti', 'is': 'Iceland', 'jp': 'Japan', 'al': 'Albania',
    'co': 'Colombia', 'tg': 'Togo', 'id': 'Indonesia', 'gn': 'Guinea', 'hr': 'Croatia',
    'sl': 'Sierra Leone', 'ca': 'Canada', 'cd': 'Congo (DR)', 'cm': 'Cameroon', 'hu': 'Hungary',
    'zm': 'Zambia', 'cz': 'Czech Republic', 'be': 'Belgium', 'tr': 'Turkey', 'sr': 'Suriname',
    'pl': 'Poland', 'sk': 'Slovakia', 'gw': 'Guinea-Bissau', 'si': 'Slovenia', 'ml': 'Mali',
    'nir': 'Northern Ireland', 'rs': 'Serbia', 'cl': 'Chile', 'wls': 'Wales', 'au': 'Australia',
    'nz': 'New Zealand', 'ec': 'Ecuador', 'lu': 'Luxembourg', 'gm': 'Gambia', 'cg': 'Congo',
    'bd': 'Bangladesh', 'gq': 'Equatorial Guinea', 'cv': 'Cape Verde', 'ge': 'Georgia',
    'mq': 'Martinique', 'ba': 'Bosnia and Herzegovina', 'mk': 'North Macedonia', 'bf': 'Burkina Faso',
    'gr': 'Greece', 'ua': 'Ukraine', 'cr': 'Costa Rica', 'lt': 'Lithuania', 'ru': 'Russia',
    'do': 'Dominican Republic', 'iq': 'Iraq', 'kr': 'South Korea', 'ph': 'Philippines',
    'bj': 'Benin', 'fi': 'Finland', 'ee': 'Estonia', 'zw': 'Zimbabwe', 'il': 'Israel',
    'cy': 'Cyprus', 'uz': 'Uzbekistan', 'ao': 'Angola', 'cf': 'Central African Republic',
    'gp': 'Guadeloupe', 'mg': 'Madagascar', 'pe': 'Peru', 'gf': 'French Guiana',
    'mz': 'Mozambique', 'am': 'Armenia', 'xk': 'Kosovo', 'ly': 'Libya', 'bi': 'Burundi',
    'ke': 'Kenya', 'km': 'Comoros', 'md': 'Moldova', 'ms': 'Montserrat', 'jo': 'Jordan',
    'ir': 'Iran', 'mt': 'Malta'
}
extracted_nation_code = df_limpio['Nation'].astype(str).str.extract(r'^(\w+)')[0].str.lower()
df_limpio.loc[:, 'Nation'] = extracted_nation_code.map(nation_mapping).fillna(df_limpio['Nation'])

"""### Eliminar porteros"""

df_limpio_GK = df_limpio[df_limpio['Pos'] != 'GK']

"""### Crear columna de player codes"""

pip install unidecode

"""### Columna de player codes para merge con transfermarkt"""

# Asegúrate de tener importado unidecode
from unidecode import unidecode

# 1. Encadena las operaciones de texto vectorizadas (más rápido)
temp_col = (df_limpio_GK['Player']
            .str.strip()
            .str.lower()
            .str.replace("'", "", regex=False)
            .str.replace(" ", "-", regex=False))

# 2. Aplica 'unidecode' solo a los valores no nulos y asigna
df_limpio_GK['player_code'] = temp_col[temp_col.notna()].apply(unidecode)

"""### Columna player_code Transfermarkt"""

temp_col = (df_maestro_raw['player_code']
            .str.strip()
            .str.lower()
            .str.replace("'", "", regex=False)
            .str.replace(" ", "-", regex=False))

# 2. Aplica 'unidecode' solo a los valores no nulos y asigna
df_maestro_raw['player_code_maestro'] = temp_col[temp_col.notna()].apply(unidecode)

"""### **Cambiar la columna Age**"""

df_limpio_GK['Age'] = df_limpio_GK['Age'].astype(str)
df_limpio_GK['Age'] = df_limpio_GK['Age'].str.extract(r'(\d+)').astype(float)

df_limpio_GK

"""### Merge con Transfermarkt"""


df_maestro_filtrado = df_maestro_raw.drop_duplicates(subset=['player_code_maestro'], keep='first')

final_merged_df = df_limpio_GK.merge(
                        df_maestro_filtrado,
                        left_on='player_code',
                        right_on='player_code_maestro',
                        how='left'
                    )
if 'player_code_maestro' in final_merged_df.columns: # Drop the redundant key from maestro
  final_merged_df.drop(columns=['player_code_maestro'], inplace=True)

"""### Pasar columnas a numérico"""

print("Convirtiendo columnas a formato numérico adecuado...")
exclude_cols = [
    'Player', 'Nation', 'Pos', 'Squad', 'League', 'Born', 'foot',
    'contract_expiration_date', 'player_code', 'sub_position', 'current_club_name',
    'PlSqu']
for col in final_merged_df.columns:
    if col not in exclude_cols:
        # Attempt conversion only if not already numeric, handling various object types
        if final_merged_df[col].dtype == 'object' or pd.api.types.is_string_dtype(final_merged_df[col]):
            final_merged_df.loc[:, col] = pd.to_numeric(final_merged_df[col], errors='coerce')

"""### **Correción nombre de equipos**"""

final_merged_df['Squad'] = final_merged_df['Squad'].str.replace(r'^(?:\d{4}[ /]*)+', '', regex=True)

final_merged_df

"""### Merge con Salaries"""

df_total = pd.merge(
    final_merged_df,
    salaries[['Weekly Wages','Annual Wages','Notes','Player']],
    on='Player',
    how='left'
)
nulos = df_total[df_total['Weekly Wages'].notnull()]

"""### Exportar a csv"""

import os

output_dir = './data'
output_filename = 'other_leagues_merge.csv'
output_path = os.path.join(output_dir, output_filename)

# Crear el directorio si no existe
os.makedirs(output_dir, exist_ok=True)

# Eliminar el archivo si ya existe
if os.path.exists(output_path):
    os.remove(output_path)

# Guardar CSV
df_total.to_csv(output_path, index=False)
print(f"\n¡Proceso completado! Archivo guardado en: {output_path}")

